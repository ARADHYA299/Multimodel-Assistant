{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ARADHYA299/Multimodel-Assistant/blob/main/Multi_ModelFinancialAssistant.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hH6rBCYTjgPl",
        "outputId": "8afc2f78-3ee1-4c08-9666-6acc41a31252"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: google-genai\n",
            "Version: 1.4.0\n",
            "Summary: GenAI Python SDK\n",
            "Home-page: https://github.com/googleapis/python-genai\n",
            "Author: \n",
            "Author-email: Google LLC <googleapis-packages@google.com>\n",
            "License: Apache-2.0\n",
            "Location: /usr/local/lib/python3.11/dist-packages\n",
            "Requires: google-auth, httpx, pydantic, requests, typing-extensions, websockets\n",
            "Required-by: \n"
          ]
        }
      ],
      "source": [
        "!pip install -q google-genai\n",
        "!pip show google-genai\n",
        "!pip install -q gradio"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 732
        },
        "id": "KTJkfTPMjssM",
        "outputId": "03af70ba-d16b-41f7-a0d0-d506f8b3da91"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: API key 'tutorhfkey' not found in environment variables\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-d74d68199226>:142: UserWarning: You have not specified a value for the `type` parameter. Defaulting to the 'tuples' format for chatbot messages, but this is deprecated and will be removed in a future version of Gradio. Please set type='messages' instead, which uses openai-style dictionaries with 'role' and 'content' keys.\n",
            "  chatbot = gr.Chatbot(\n",
            "<ipython-input-6-d74d68199226>:142: DeprecationWarning: The 'bubble_full_width' parameter is deprecated and will be removed in a future version. This parameter no longer has any effect.\n",
            "  chatbot = gr.Chatbot(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://646e4ac5e5dcc86474.gradio.live\n",
            "\n",
            "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://646e4ac5e5dcc86474.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "import plotly.graph_objects as go\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime\n",
        "import os\n",
        "import re\n",
        "os.system(\"pip install --upgrade transformers accelerate torch\")\n",
        "import torch\n",
        "import gradio as gr\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import yfinance as yf\n",
        "device = 0 if torch.cuda.is_available() else -1\n",
        "print(\"pip install nltk\")\n",
        "import nltk\n",
        "print(\"pip install transformers\")\n",
        "\n",
        "from transformers import pipeline\n",
        "\n",
        "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
        "nltk.download('vader_lexicon')\n",
        "\n",
        "\n",
        "# Get HF API token from environment\n",
        "import requests\n",
        "# Get HF API token from environment\n",
        "HF_API_KEY = os.environ.get(\"tutorhfkey\")\n",
        "if not HF_API_KEY:\n",
        "    print(\"WARNING: No Hugging Face API token found. API calls will likely fail.\")\n",
        "    print(\"Set the 'tutorhfkey' environment variable in your Hugging Face Space settings.\")\n",
        "SYSTEM_INSTRUCTIONS = \"\"\"You are a financial markets tutor , assistant and adviser designed to educate and recommend/advise beginners, intermediates or experts about investing, financial instruments, money markets and market dynamics.\n",
        "Answer briefly and point by point and to the point, don't explain unnecessarily, and use things like real life examples or the things with which they can relate them.\n",
        "Things to remember:\n",
        "-to first ask the user how much do they know about the financial and money market(if they dont want this)\n",
        "-whether they want to know about a specific security (stocks,commodities and others)\n",
        "Capabilities:\n",
        "- Teach financial concepts in an interactive and engaging way.\n",
        "- Guide users on different types of financial markets (stocks, bonds, crypto, commodities, etc.).\n",
        "- Explain investment strategies, risk management, and portfolio diversification but tell these only when asked.\n",
        "- Answer questions related to fundamental and technical analysis.\n",
        "- If they give you certain budgets provide them the best areas to invest along with risk involved but warn them about the risks and also advise to think before investing.\n",
        "- You can analyze user sentiment to provide personalized financial advice.\n",
        "- You can explain stock trends and market news sentiment when requested.\n",
        "- If the user asks any other questions than finance , politely tell them that you are not able to answer or you are not designed for that purpose\n",
        "\n",
        "Guidelines:\n",
        "- Begin by asking whats your level of knowledge like beginner , intermediate and expert.\n",
        "- continue by understanding the user's financial knowledge level or by asking them what level of knowledge they have about financial and money markets.\n",
        "- let the user control the flow and ask after every concept whether they learned or not.\n",
        "- If the user is new/beginner, first ask them which financial market they are interested in.\n",
        "- Provide structured/point by point explanations with real life or related examples.\n",
        "- After a major concept ask them if they understood or do they have any kind of doubt regarding the topic.\n",
        "- Be as user friendly as possible.\n",
        "- Use simple language and try to give response in an example or things with which the user can relate.\n",
        "- If the user seems anxious or negative about investing, provide reassuring advice about risk management.\n",
        "- If the user seems overconfident, remind them about market volatility and risk assessment.\"\"\"\n",
        "\n",
        "API_URL = \"https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2\"\n",
        "headers = {\"Authorization\": f\"Bearer {HF_API_KEY}\"}\n",
        "\n",
        "def generate_text_with_api(prompt, max_new_tokens=200, temperature=0.7, top_p=0.9):\n",
        "    \"\"\"Generate text using the Hugging Face API with Mistral-7B-Instruct model.\"\"\"\n",
        "    API_URL = \"https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2\"\n",
        "    headers = {\"Authorization\": f\"Bearer {HF_API_KEY}\"}\n",
        "\n",
        "    # Ensure prompt is correctly formatted for Mistral\n",
        "    if not prompt.startswith(\"<s>[INST]\"):\n",
        "        prompt = f\"<s>[INST]{prompt}[/INST]\"\n",
        "\n",
        "    payload = {\n",
        "        \"inputs\": prompt,\n",
        "        \"parameters\": {\n",
        "            \"max_new_tokens\": max_new_tokens,\n",
        "            \"temperature\": temperature,\n",
        "            \"top_p\": top_p,\n",
        "            \"return_full_text\": False  # Changed to False to get only the new text\n",
        "        }\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)\n",
        "\n",
        "        # Check if we got a valid response\n",
        "        if response.status_code != 200:\n",
        "            print(f\"API Error: Status code {response.status_code}\")\n",
        "            print(f\"Response content: {response.text}\")\n",
        "            return f\"Sorry, I couldn't generate a response. API error: {response.status_code}\"\n",
        "\n",
        "        result = response.json()\n",
        "\n",
        "        # Handle different response formats\n",
        "        if isinstance(result, list) and len(result) > 0:\n",
        "            if \"generated_text\" in result[0]:\n",
        "                return result[0][\"generated_text\"]\n",
        "            else:\n",
        "                print(f\"Unexpected API response format: {result}\")\n",
        "                return \"I'm sorry, I couldn't generate a helpful response right now.\"\n",
        "        elif isinstance(result, dict) and \"generated_text\" in result:\n",
        "            return result[\"generated_text\"]\n",
        "        else:\n",
        "            print(f\"Unexpected API response format: {result}\")\n",
        "            return \"I'm sorry, I couldn't generate a helpful response right now.\"\n",
        "    except Exception as e:\n",
        "        print(f\"API Error: {str(e)}\")\n",
        "        return f\"I'm sorry, I couldn't generate a response due to an API error. Please try again later.\"\n",
        "\n",
        "\n",
        "# Download NLTK resources\n",
        "try:\n",
        "    nltk.data.find('vader_lexicon')\n",
        "except LookupError:\n",
        "    nltk.download('vader_lexicon')\n",
        "\n",
        "# Initialize sentiment analyzer\n",
        "sentiments = pipeline(\"sentiment-analysis\", model=\"distilbert-base-uncased-finetuned-sst-2-english\",device = device)\n",
        "finance_sentiment = SentimentIntensityAnalyzer()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "NEWS_API_KEY = os.environ.get(\"newsapikey\", \"38666Z58XHGQB9X6\")\n",
        "NEWS_API_URL = \"https://newsapi.org/v2/everything\"\n",
        "\n",
        "# System instructions for the financial tutor\n",
        "\n",
        "def generate_response(prompt):\n",
        "    \"\"\"Generate text using the Mistral-7B-Instruct model via HF API.\"\"\"\n",
        "    try:\n",
        "        # Add a fallback in case the API fails\n",
        "        if not HF_API_KEY or HF_API_KEY == \"\":\n",
        "            return \"I'm sorry, but I need an API key to provide responses. Please set the 'tutorhfkey' environment variable.\"\n",
        "\n",
        "        response = generate_text_with_api(prompt, max_new_tokens=200, temperature=0.7, top_p=0.9)\n",
        "\n",
        "        # Clean up response text\n",
        "        response = response.strip()\n",
        "\n",
        "        # If the response is empty or too short, provide a fallback\n",
        "        if len(response) < 10:\n",
        "            return \"I'm sorry, I couldn't generate a proper response. Please try rephrasing your question.\"\n",
        "\n",
        "        return response\n",
        "    except Exception as e:\n",
        "        print(f\"Error in generate_response: {e}\")\n",
        "        return \"I'm sorry, I couldn't generate a response. Please try again.\"\n",
        "\n",
        "def format_prompt(messages, sentiment_data=None, stock_data=None, news_sentiment=None):\n",
        "    \"\"\"Format the conversation history for the model with additional context\"\"\"\n",
        "    prompt = SYSTEM_INSTRUCTIONS + \"\\n\\n\"\n",
        "\n",
        "    # Add sentiment analysis context if available\n",
        "    if sentiment_data:\n",
        "        prompt += f\"User Sentiment Analysis: The user's message appears to be {sentiment_data['sentiment'].lower()} \"\n",
        "        prompt += f\"with confidence {sentiment_data['confidence']:.2f}. \"\n",
        "        prompt += f\"Compound score: {sentiment_data['compound_score']:.2f}\\n\\n\"\n",
        "\n",
        "    # Add stock data context if available\n",
        "    if isinstance(stock_data, dict) and 'ticker' in stock_data:\n",
        "        prompt += f\"Stock Analysis for {stock_data['ticker']}: \"\n",
        "        prompt += f\"Current price: ${stock_data['current_price']:.2f}, \"\n",
        "        prompt += f\"Weekly change: {stock_data['weekly_change']:.2f}%, \"\n",
        "        prompt += f\"Monthly change: {stock_data['monthly_change']:.2f}%, \"\n",
        "        prompt += f\"Volatility: {stock_data['volatility']:.2f}%\\n\\n\"\n",
        "\n",
        "    # Add news sentiment context if available\n",
        "    if isinstance(news_sentiment, dict) and 'overall_sentiment' in news_sentiment:\n",
        "        prompt += f\"News Sentiment: Overall {news_sentiment['overall_sentiment'].lower()} \"\n",
        "        prompt += f\"with score {news_sentiment['overall_score']:.2f}\\n\\n\"\n",
        "\n",
        "    # Add conversation history\n",
        "    prompt += \"Conversation history:\\n\"\n",
        "    for message in messages:\n",
        "        role = message[\"role\"]\n",
        "        content = message[\"content\"]\n",
        "        if role == \"user\":\n",
        "            prompt += f\"User: {content}\\n\"\n",
        "        else:\n",
        "            prompt += f\"Assistant: {content}\\n\"\n",
        "\n",
        "    # Add current query instruction\n",
        "    if messages and messages[-1][\"role\"] == \"user\":\n",
        "        prompt += \"\\nPlease respond to the user's latest question in a helpful, concise manner focused on financial education.\"\n",
        "\n",
        "    return prompt\n",
        "\n",
        "\n",
        "def get_investment_recommendations(risk_tolerance, budget=None):\n",
        "    \"\"\"Generate investment recommendations based on risk tolerance and budget\"\"\"\n",
        "\n",
        "    recommendations = {\n",
        "        'very low': {\n",
        "            'description': \"For very low risk tolerance, focus on capital preservation with minimal volatility.\",\n",
        "            'allocation': [\n",
        "                {'type': 'High-yield Savings', 'percentage': 40},\n",
        "                {'type': 'Government Bonds', 'percentage': 35},\n",
        "                {'type': 'Investment Grade Corporate Bonds', 'percentage': 20},\n",
        "                {'type': 'Blue-chip Stocks', 'percentage': 5}\n",
        "            ]\n",
        "        },\n",
        "        'low': {\n",
        "            'description': \"For low risk tolerance, prioritize safety with some income potential.\",\n",
        "            'allocation': [\n",
        "                {'type': 'Government Bonds', 'percentage': 30},\n",
        "                {'type': 'Corporate Bonds', 'percentage': 30},\n",
        "                {'type': 'Blue-chip Stocks', 'percentage': 25},\n",
        "                {'type': 'High-yield Savings', 'percentage': 10},\n",
        "                {'type': 'REITs', 'percentage': 5}\n",
        "            ]\n",
        "        },\n",
        "        'moderate': {\n",
        "            'description': \"For moderate risk tolerance, balance growth and income with diversification.\",\n",
        "            'allocation': [\n",
        "                {'type': 'Index Funds', 'percentage': 40},\n",
        "                {'type': 'Corporate Bonds', 'percentage': 25},\n",
        "                {'type': 'Blue-chip Stocks', 'percentage': 20},\n",
        "                {'type': 'International Stocks', 'percentage': 10},\n",
        "                {'type': 'REITs', 'percentage': 5}\n",
        "            ]\n",
        "        },\n",
        "        'high': {\n",
        "            'description': \"For high risk tolerance, focus on long-term growth with higher volatility.\",\n",
        "            'allocation': [\n",
        "                {'type': 'Growth Stocks', 'percentage': 45},\n",
        "                {'type': 'Index Funds', 'percentage': 25},\n",
        "                {'type': 'International Stocks', 'percentage': 15},\n",
        "                {'type': 'Corporate Bonds', 'percentage': 10},\n",
        "                {'type': 'Alternative Investments', 'percentage': 5}\n",
        "            ]\n",
        "        },\n",
        "        'very high': {\n",
        "            'description': \"For very high risk tolerance, maximize growth potential with significant volatility.\",\n",
        "            'allocation': [\n",
        "                {'type': 'Growth Stocks', 'percentage': 40},\n",
        "                {'type': 'Emerging Markets', 'percentage': 25},\n",
        "                {'type': 'Small Cap Stocks', 'percentage': 20},\n",
        "                {'type': 'Commodities', 'percentage': 10},\n",
        "                {'type': 'Cryptocurrency', 'percentage': 5}\n",
        "            ]\n",
        "        }\n",
        "    }\n",
        "\n",
        "    result = recommendations.get(risk_tolerance.lower(), recommendations['moderate'])\n",
        "\n",
        "    if budget and 'amount' in budget:\n",
        "        amount = budget['amount']\n",
        "        for item in result['allocation']:\n",
        "            item['amount'] = amount * (item['percentage'] / 100)\n",
        "\n",
        "    return result\n",
        "\n",
        "# Extract stock ticker symbols from user message\n",
        "def extract_tickers(message):\n",
        "    # Look for standard stock ticker patterns (1-5 uppercase letters)\n",
        "    ticker_pattern = r'\\b[A-Z]{1,5}\\b'\n",
        "    potential_tickers = re.findall(ticker_pattern, message)\n",
        "\n",
        "    # Filter out common English words and acronyms that aren't tickers\n",
        "    common_words = {'I', 'A', 'AN', 'THE', 'AND', 'OR', 'IF', 'IS', 'IT', 'BE', 'TO', 'IN', 'ON', 'AT', 'OF', 'FOR'}\n",
        "    filtered_tickers = [ticker for ticker in potential_tickers if ticker not in common_words]\n",
        "\n",
        "    return filtered_tickers\n",
        "\n",
        "# Get news sentiment for a specific topic or ticker - Using a mock implementation since we don't have API key\n",
        "def get_news_sentiment(query, max_results=5):\n",
        "    try:\n",
        "        # Mock implementation that returns simulated news sentiment\n",
        "        sentiment_options = [\"POSITIVE\", \"NEUTRAL\", \"NEGATIVE\"]\n",
        "        scores = np.random.normal(0, 0.5, 3)  # Generate random scores with normal distribution\n",
        "\n",
        "        # Adjust scores to be between -1 and 1\n",
        "        scores = np.clip(scores, -1, 1)\n",
        "\n",
        "        # Create mock articles\n",
        "        articles = []\n",
        "        for i in range(min(3, max_results)):\n",
        "            sentiment_score = scores[i]\n",
        "            if sentiment_score >= 0.05:\n",
        "                sentiment = \"POSITIVE\"\n",
        "            elif sentiment_score <= -0.05:\n",
        "                sentiment = \"NEGATIVE\"\n",
        "            else:\n",
        "                sentiment = \"NEUTRAL\"\n",
        "\n",
        "            articles.append({\n",
        "                'headline': f\"Latest news about {query} - Article {i+1}\",\n",
        "                'sentiment': sentiment,\n",
        "                'score': sentiment_score,\n",
        "                'source': f\"Financial Source {i+1}\",\n",
        "                'url': f\"https://example.com/news/{i+1}\"\n",
        "            })\n",
        "\n",
        "        # Calculate overall sentiment\n",
        "        avg_score = sum(article['score'] for article in articles) / len(articles)\n",
        "\n",
        "        if avg_score >= 0.05:\n",
        "            overall = \"POSITIVE\"\n",
        "        elif avg_score <= -0.05:\n",
        "            overall = \"NEGATIVE\"\n",
        "        else:\n",
        "            overall = \"NEUTRAL\"\n",
        "\n",
        "        return {\n",
        "            'overall_sentiment': overall,\n",
        "            'overall_score': avg_score,\n",
        "            'articles': articles\n",
        "        }\n",
        "    except Exception as e:\n",
        "        return f\"Error analyzing news sentiment: {str(e)}\"\n",
        "\n",
        "def get_stock_data(ticker, period='1mo'):\n",
        "    try:\n",
        "        stock = yf.Ticker(ticker)\n",
        "        hist = stock.history(period=period)\n",
        "\n",
        "        if hist.empty:\n",
        "            return f\"No data found for ticker {ticker}. It may be delisted or incorrectly spelled.\"\n",
        "\n",
        "        # Calculate some basic technical indicators\n",
        "        hist['SMA20'] = hist['Close'].rolling(window=20).mean()\n",
        "        hist['SMA50'] = hist['Close'].rolling(window=50).mean()\n",
        "\n",
        "        # Determine trend\n",
        "        current_price = hist['Close'].iloc[-1]\n",
        "        week_ago_price = hist['Close'].iloc[-6] if len(hist) >= 6 else hist['Close'].iloc[0]\n",
        "        month_ago_price = hist['Close'].iloc[0]\n",
        "\n",
        "        weekly_change = ((current_price - week_ago_price) / week_ago_price) * 100\n",
        "        monthly_change = ((current_price - month_ago_price) / month_ago_price) * 100\n",
        "\n",
        "        # Determine if stock is above or below moving averages\n",
        "        above_sma20 = current_price > hist['SMA20'].iloc[-1] if not np.isnan(hist['SMA20'].iloc[-1]) else \"Unknown\"\n",
        "        above_sma50 = current_price > hist['SMA50'].iloc[-1] if not np.isnan(hist['SMA50'].iloc[-1]) else \"Unknown\"\n",
        "        hist['Daily_Return'] = hist['Close'].pct_change()\n",
        "        volatility = hist['Daily_Return'].std() * 100  # Convert to percentage\n",
        "\n",
        "        # Prepare chart data\n",
        "        fig = go.Figure()\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=hist['Close'], mode='lines', name='Price'))\n",
        "        if not hist['SMA20'].isnull().all():\n",
        "            fig.add_trace(go.Scatter(x=hist.index, y=hist['SMA20'], mode='lines', name='SMA20'))\n",
        "        if not hist['SMA50'].isnull().all():\n",
        "            fig.add_trace(go.Scatter(x=hist.index, y=hist['SMA50'], mode='lines', name='SMA50'))\n",
        "\n",
        "        fig.update_layout(\n",
        "            title=f\"{ticker} Price Chart\",\n",
        "            xaxis_title=\"Date\",\n",
        "            yaxis_title=\"Price\",\n",
        "            height=500,\n",
        "            template=\"plotly_white\"\n",
        "        )\n",
        "\n",
        "        return {\n",
        "            'ticker': ticker,\n",
        "            'current_price': current_price,\n",
        "            'weekly_change': weekly_change,\n",
        "            'monthly_change': monthly_change,\n",
        "            'above_sma20': above_sma20,\n",
        "            'above_sma50': above_sma50,\n",
        "            'volatility': volatility,\n",
        "            'chart': fig\n",
        "        }\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error analyzing {ticker}: {str(e)}\")\n",
        "        return f\"Error analyzing {ticker}: {str(e)}\"\n",
        "\n",
        "\n",
        "\n",
        "# Analyze user message sentiment\n",
        "def analyze_user_sentiment(message):\n",
        "    try:\n",
        "        # Use sentiment analysis pipeline\n",
        "        result = sentiments(message)\n",
        "        if not result:\n",
        "            return None\n",
        "\n",
        "        sentiment_result = result[0]\n",
        "        sentiment_label = sentiment_result['label']\n",
        "        confidence = sentiment_result['score']\n",
        "\n",
        "        # Use NLTK VADER for more nuanced analysis\n",
        "        vader_scores = finance_sentiment.polarity_scores(message)\n",
        "\n",
        "        return {\n",
        "            'sentiment': sentiment_label,\n",
        "            'confidence': confidence,\n",
        "            'compound_score': vader_scores['compound'],\n",
        "            'positive': vader_scores['pos'],\n",
        "            'negative': vader_scores['neg'],\n",
        "            'neutral': vader_scores['neu']\n",
        "        }\n",
        "    except Exception as e:\n",
        "        print(f\"Error in sentiment analysis: {str(e)}\")\n",
        "        return None\n",
        "\n",
        "# Extract investment budget from message\n",
        "def extract_budget(message):\n",
        "    # Pattern for currency amounts\n",
        "    budget_pattern = r'(\\$|£|€|₹)?\\s?(\\d+[,.]?\\d*)\\s?(thousand|million|billion|k|m|b)?\\s?(dollars|usd|rupees|inr|euros|eur|pounds|gbp)?'\n",
        "\n",
        "    match = re.search(budget_pattern, message.lower())\n",
        "    if match:\n",
        "        amount = match.group(2).replace(',', '')\n",
        "        multiplier = match.group(3) if match.group(3) else ''\n",
        "\n",
        "        try:\n",
        "            amount = float(amount)\n",
        "\n",
        "            if multiplier:\n",
        "                if multiplier.lower() in ['k', 'thousand']:\n",
        "                    amount *= 1000\n",
        "                elif multiplier.lower() in ['m', 'million']:\n",
        "                    amount *= 1000000\n",
        "                elif multiplier.lower() in ['b', 'billion']:\n",
        "                    amount *= 1000000000\n",
        "\n",
        "            currency = match.group(1) if match.group(1) else (match.group(4) if match.group(4) else 'USD')\n",
        "\n",
        "            return {\n",
        "                'amount': amount,\n",
        "                'currency': currency\n",
        "            }\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "    return None\n",
        "\n",
        "# Extract risk tolerance from user message\n",
        "def extract_risk_tolerance(message):\n",
        "    msg = message.lower()\n",
        "\n",
        "    risk_phrases = {\n",
        "        'very low': ['very conservative', 'extremely safe', 'no risk', 'safest possible', 'can\\'t afford to lose'],\n",
        "        'low': ['conservative', 'safe', 'low risk', 'minimal risk', 'safety', 'secure'],\n",
        "        'moderate': ['balanced', 'moderate', 'middle ground', 'medium risk', 'some risk'],\n",
        "        'high': ['aggressive', 'high risk', 'risky', 'growth focused', 'willing to take risks'],\n",
        "        'very high': ['very aggressive', 'highest risk', 'extremely risky', 'maximum growth', 'speculative']\n",
        "    }\n",
        "\n",
        "    for tolerance, phrases in risk_phrases.items():\n",
        "        if any(phrase in msg for phrase in phrases):\n",
        "            return tolerance\n",
        "\n",
        "    return None\n",
        "\n",
        "# Identify financial education level\n",
        "def identify_education_level(message):\n",
        "    msg = message.lower()\n",
        "\n",
        "    if any(term in msg for term in ['beginner', 'new', 'novice', 'starting', 'basics', 'fundamental', 'never invested']):\n",
        "        return 'beginner'\n",
        "    elif any(term in msg for term in ['intermediate', 'some experience', 'familiar', 'understand']):\n",
        "        return 'intermediate'\n",
        "    elif any(term in msg for term in ['advanced', 'expert', 'professional', 'experienced', 'seasoned']):\n",
        "        return 'advanced'\n",
        "\n",
        "    return None\n",
        "\n",
        "def respond(message, chat_history, conversation_state, user_profile):\n",
        "    \"\"\"Process user message and get response from the model\"\"\"\n",
        "\n",
        "    # Initialize conversation if empty\n",
        "    if not conversation_state:\n",
        "        conversation_state = [\n",
        "            {\"role\": \"assistant\", \"content\": \"Hello! I'm your financial markets tutor. Before we begin, could you tell me your current level of knowledge about financial markets? Are you a beginner, intermediate, or advanced?\"}\n",
        "        ]\n",
        "\n",
        "    # Add user message to conversation state\n",
        "    conversation_state.append({\"role\": \"user\", \"content\": message})\n",
        "\n",
        "    try:\n",
        "        # Analyze user message\n",
        "        sentiment_data = analyze_user_sentiment(message)\n",
        "        education_level = identify_education_level(message)\n",
        "        risk_tolerance = extract_risk_tolerance(message)\n",
        "        budget = extract_budget(message)\n",
        "        tickers = extract_tickers(message)\n",
        "\n",
        "        # Update user profile\n",
        "        if education_level:\n",
        "            user_profile[\"education_level\"] = education_level\n",
        "        if risk_tolerance:\n",
        "            user_profile[\"risk_tolerance\"] = risk_tolerance\n",
        "        if budget:\n",
        "            user_profile[\"budget\"] = budget\n",
        "\n",
        "        # Process ticker information if found\n",
        "        stock_data = None\n",
        "        news_sentiment = None\n",
        "        chart = None\n",
        "\n",
        "        if tickers and (re.search(r'stock|price|ticker|trend|chart|analysis', message.lower()) or\n",
        "                       any(ticker.lower() in message.lower() for ticker in tickers)):\n",
        "            # Only process the first ticker for simplicity\n",
        "            ticker = tickers[0]\n",
        "            stock_data = get_stock_data(ticker)\n",
        "            if isinstance(stock_data, dict) and 'chart' in stock_data:\n",
        "                chart = stock_data['chart']\n",
        "            news_sentiment = get_news_sentiment(ticker)\n",
        "\n",
        "        # Get investment recommendations if user profile has enough information\n",
        "        recommendations = None\n",
        "        if \"risk_tolerance\" in user_profile and re.search(r'invest|allocation|portfolio|recommend|suggest|advice', message.lower()):\n",
        "            recommendations = get_investment_recommendations(user_profile[\"risk_tolerance\"], user_profile.get(\"budget\", None))\n",
        "\n",
        "        # Format the prompt with additional context\n",
        "        prompt = format_prompt(conversation_state, sentiment_data, stock_data, news_sentiment)\n",
        "\n",
        "        # Get response from model\n",
        "        response_text = generate_response(prompt)\n",
        "\n",
        "        # If response is empty or very short, provide fallback\n",
        "        if len(response_text) < 10:\n",
        "            response_text = \"I'm sorry, I'm having trouble generating a response. Please try asking your question in a different way.\"\n",
        "\n",
        "        # Enhance response with additional data if available\n",
        "        if chart:\n",
        "            response_text += \"\\n\\n[Stock chart for \" + stock_data['ticker'] + \" is displayed separately]\"\n",
        "\n",
        "        # Add recommendations if available\n",
        "        if recommendations:\n",
        "            recommendation_text = f\"\\n\\nBased on your {user_profile['risk_tolerance']} risk tolerance\"\n",
        "            if 'budget' in user_profile and 'amount' in user_profile['budget']:\n",
        "                amount_str = f\"{user_profile['budget']['amount']:,.2f}\"\n",
        "                recommendation_text += f\" and budget of {amount_str}\"\n",
        "            recommendation_text += f\", here's a suggested portfolio allocation:\\n\\n\"\n",
        "            recommendation_text += recommendations['description'] + \"\\n\\n\"\n",
        "\n",
        "            # Format allocation as a table\n",
        "            allocation_text = \"Investment Type | Percentage\"\n",
        "            allocation_text += \"\\n--------------|----------\"\n",
        "            for item in recommendations['allocation']:\n",
        "                allocation_text += f\"\\n{item['type']} | {item['percentage']}%\"\n",
        "\n",
        "            response_text += \"\\n\\n\" + recommendation_text + allocation_text\n",
        "\n",
        "        # Add assistant response to conversation\n",
        "        conversation_state.append({\"role\": \"assistant\", \"content\": response_text})\n",
        "\n",
        "        # Update the chat history for Gradio display\n",
        "        chat_history.append((message, response_text))\n",
        "\n",
        "        return chat_history, conversation_state, user_profile, chart\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error in respond function: {str(e)}\")\n",
        "        error_message = \"I'm sorry, I encountered an error while processing your request. Please try again or ask a different question.\"\n",
        "        conversation_state.append({\"role\": \"assistant\", \"content\": error_message})\n",
        "        chat_history.append((message, error_message))\n",
        "        return chat_history, conversation_state, user_profile, None\n",
        "\n",
        "def fallback_response(message):\n",
        "    \"\"\"Provide a basic response when the model fails\"\"\"\n",
        "    if re.search(r'hello|hi|hey|greetings', message.lower()):\n",
        "        return \"Hello! I'm your financial markets tutor. How can I help you today?\"\n",
        "\n",
        "    if re.search(r'stock|price|ticker|trend|chart|analysis', message.lower()):\n",
        "        return \"I'd be happy to help you analyze stocks. Could you specify which ticker you're interested in?\"\n",
        "\n",
        "    if re.search(r'invest|allocation|portfolio|recommend|suggest|advice', message.lower()):\n",
        "        return \"For investment advice, I need to know your risk tolerance (conservative, moderate, or aggressive) and optionally your budget. Could you provide that information?\"\n",
        "\n",
        "    if re.search(r'beginner|new|start|learn|basics', message.lower()):\n",
        "        return \"As a beginner in financial markets, I recommend starting with understanding the basics of stocks, bonds, and mutual funds. Would you like me to explain any of these concepts?\"\n",
        "\n",
        "    return \"I'm here to help with your financial questions. Could you provide more details about what you'd like to know about investing or financial markets?\"\n",
        "\n",
        "\n",
        "# Function to create personalized financial reports\n",
        "def create_financial_report(user_profile):\n",
        "    \"\"\"Generate a personalized financial report based on user profile\"\"\"\n",
        "    if not user_profile or \"education_level\" not in user_profile:\n",
        "        return \"Not enough user data collected to generate a personalized report.\"\n",
        "\n",
        "    # Create a report header\n",
        "    now = datetime.now()\n",
        "    report = f\"# Personal Financial Report\\n\\n\"\n",
        "    report += f\"Generated on: {now.strftime('%B %d, %Y')}\\n\\n\"\n",
        "\n",
        "    # Add user profile information\n",
        "    report += \"## Your Profile\\n\\n\"\n",
        "    report += f\"- Knowledge Level: {user_profile.get('education_level', 'Not specified')}\\n\"\n",
        "\n",
        "    if \"risk_tolerance\" in user_profile:\n",
        "        report += f\"- Risk Tolerance: {user_profile.get('risk_tolerance', 'Not specified')}\\n\"\n",
        "\n",
        "    if \"budget\" in user_profile and \"amount\" in user_profile[\"budget\"]:\n",
        "        amount = user_profile[\"budget\"][\"amount\"]\n",
        "        currency = user_profile[\"budget\"].get(\"currency\", \"USD\")\n",
        "        report += f\"- Investment Budget: {amount:,.2f} {currency}\\n\"\n",
        "\n",
        "    # Add recommendations section if we have risk tolerance\n",
        "    if \"risk_tolerance\" in user_profile:\n",
        "        recommendations = get_investment_recommendations(user_profile[\"risk_tolerance\"],\n",
        "                                                         user_profile.get(\"budget\", None))\n",
        "\n",
        "        if recommendations:\n",
        "            report += \"\\n## Investment Recommendations\\n\\n\"\n",
        "            report += recommendations[\"description\"] + \"\\n\\n\"\n",
        "\n",
        "            # Create a table of allocations\n",
        "            report += \"| Investment Type | Percentage |\"\n",
        "            if \"budget\" in user_profile and \"amount\" in user_profile[\"budget\"]:\n",
        "                report += \" Amount |\"\n",
        "            report += \"\\n|-----------------|------------|\"\n",
        "            if \"budget\" in user_profile and \"amount\" in user_profile[\"budget\"]:\n",
        "                report += \"--------|\"\n",
        "            report += \"\\n\"\n",
        "\n",
        "            for item in recommendations[\"allocation\"]:\n",
        "                report += f\"| {item['type']} | {item['percentage']}% |\"\n",
        "                if \"budget\" in user_profile and \"amount\" in user_profile[\"budget\"]:\n",
        "                    amount = item.get(\"amount\", 0)\n",
        "                    report += f\" {amount:,.2f} |\"\n",
        "                report += \"\\n\"\n",
        "\n",
        "    # Add educational resources based on level\n",
        "    report += \"\\n## Recommended Educational Resources\\n\\n\"\n",
        "\n",
        "    if user_profile.get(\"education_level\") == \"beginner\":\n",
        "        report += \"### For Beginners:\\n\\n\"\n",
        "        report += \"1. **Investopedia Basics** - Fundamental concepts and terminology\\n\"\n",
        "        report += \"2. **Khan Academy: Personal Finance** - Free courses on investing basics\\n\"\n",
        "        report += \"3. **'A Random Walk Down Wall Street'** by Burton Malkiel - Classic book for beginners\\n\"\n",
        "        report += \"4. **Robinhood Learn** - Simple explanations of investment concepts\\n\"\n",
        "    elif user_profile.get(\"education_level\") == \"intermediate\":\n",
        "        report += \"### For Intermediate Investors:\\n\\n\"\n",
        "        report += \"1. **'The Intelligent Investor'** by Benjamin Graham - Value investing principles\\n\"\n",
        "        report += \"2. **Morningstar Investment Classroom** - More advanced investment concepts\\n\"\n",
        "        report += \"3. **Yahoo Finance** - Research tools and market analysis\\n\"\n",
        "        report += \"4. **'The Little Book of Common Sense Investing'** by John Bogle\\n\"\n",
        "    else:  # advanced\n",
        "        report += \"### For Advanced Investors:\\n\\n\"\n",
        "        report += \"1. **Bloomberg Terminal** (if accessible) - Professional-grade research\\n\"\n",
        "        report += \"2. **CFA Institute Resources** - Professional investment analysis\\n\"\n",
        "        report += \"3. **'Security Analysis'** by Benjamin Graham and David Dodd\\n\"\n",
        "        report += \"4. **Journal of Finance** - Academic research on financial markets\\n\"\n",
        "\n",
        "    # Add market outlook section\n",
        "    report += \"\\n## Current Market Outlook\\n\\n\"\n",
        "    report += \"This section would typically contain current market analysis and trends.\\n\"\n",
        "    report += \"For real-time and accurate market outlook, consider consulting financial news sources like:\\n\\n\"\n",
        "    report += \"- Wall Street Journal\\n\"\n",
        "    report += \"- Financial Times\\n\"\n",
        "    report += \"- Bloomberg\\n\"\n",
        "    report += \"- CNBC\\n\"\n",
        "\n",
        "    # Add disclaimer\n",
        "    report += \"\\n## Disclaimer\\n\\n\"\n",
        "    report += \"_This report is generated based on your interaction with the Financial Markets Tutor. \"\n",
        "    report += \"It is for educational purposes only and does not constitute financial advice. \"\n",
        "    report += \"Always consult with a qualified financial advisor before making investment decisions._\\n\"\n",
        "\n",
        "    return report\n",
        "\n",
        "\n",
        "\n",
        "def create_interface():\n",
        "    with gr.Blocks(theme=gr.themes.Soft()) as demo:\n",
        "        gr.Markdown(\"# 📊 StockSensei 📊\")\n",
        "        gr.Markdown(\"The genie of financial markets is here to help you, Ask me anything about any market.\")\n",
        "\n",
        "        with gr.Row():\n",
        "            with gr.Column(scale=7):\n",
        "                chatbot = gr.Chatbot(\n",
        "                    value=[],\n",
        "                    show_label=False,\n",
        "                    height=500,\n",
        "                    bubble_full_width=False,\n",
        "                    show_copy_button=True,\n",
        "                )\n",
        "                conversation_state = gr.State([])\n",
        "                user_profile = gr.State({})\n",
        "\n",
        "                with gr.Row():\n",
        "                    message = gr.Textbox(\n",
        "                        show_label=False,\n",
        "                        placeholder=\"Type your question here...\",\n",
        "                        scale=5\n",
        "                    )\n",
        "                    submit = gr.Button(\"Send\", scale=1)\n",
        "\n",
        "            # Right sidebar for real-time stock data and sentiment analysis\n",
        "            with gr.Column(scale=3):\n",
        "                with gr.Tab(\"Profile\"):\n",
        "                    gr.Markdown(\"### Your Financial Profile\")\n",
        "                    profile_info = gr.JSON(label=\"Profile Data\")  # Remove the value parameter\n",
        "                    generate_report_btn = gr.Button(\"Generate Financial Report\")\n",
        "                    report_output = gr.Markdown(label=\"Personal Financial Report\")\n",
        "\n",
        "                with gr.Tab(\"Market Data\"):\n",
        "                    stock_input = gr.Textbox(label=\"Enter Stock Ticker\", placeholder=\"e.g. AAPL\")\n",
        "                    stock_btn = gr.Button(\"Get Stock Data\")\n",
        "                    stock_plot = gr.Plot(label=\"Stock Price Chart\")\n",
        "                    stock_info = gr.JSON(label=\"Stock Information\")\n",
        "\n",
        "                with gr.Tab(\"News Sentiment\"):\n",
        "                    news_input = gr.Textbox(label=\"Topic or Ticker\", placeholder=\"e.g. bitcoin or TSLA\")\n",
        "                    news_btn = gr.Button(\"Analyze News Sentiment\")\n",
        "                    news_output = gr.JSON(label=\"News Sentiment Analysis\")\n",
        "\n",
        "                with gr.Tab(\"Market Mood\"):\n",
        "                    gr.Markdown(\"### Market Sentiment Tracker\")\n",
        "                    market_mood = gr.Label(label=\"Current Market Mood\")\n",
        "                    update_mood_btn = gr.Button(\"Update Market Mood\")\n",
        "\n",
        "        # Stock chart display area\n",
        "        stock_chart_output = gr.Plot(visible=False)\n",
        "\n",
        "        def user_input(message, chat_history, conversation_state, user_profile):\n",
        "            if message == \"\":\n",
        "                return chat_history, conversation_state, user_profile, None, gr.update(visible=False)\n",
        "\n",
        "            chat_history, conversation_state, user_profile, chart = respond(message, chat_history, conversation_state, user_profile)\n",
        "\n",
        "            # Return the updated user_profile instead of trying to update the JSON component directly\n",
        "            if chart:\n",
        "                return chat_history, conversation_state, user_profile, gr.update(value=\"\"), gr.update(value=chart, visible=True)\n",
        "            else:\n",
        "                return chat_history, conversation_state, user_profile, gr.update(value=\"\"), gr.update(visible=False)\n",
        "\n",
        "        def initialize_chat():\n",
        "            initial_message = \"Hello! I'm your financial markets tutor. Before we begin, could you tell me your current level of knowledge about financial markets? Are you a beginner, intermediate, or advanced?\"\n",
        "            return [(None, initial_message)], [{\"role\": \"assistant\", \"content\": initial_message}], {}\n",
        "\n",
        "        message.submit(user_input, [message, chatbot, conversation_state, user_profile],\n",
        "                       [chatbot, conversation_state, user_profile, message, stock_chart_output])\n",
        "        submit.click(user_input, [message, chatbot, conversation_state, user_profile],\n",
        "                     [chatbot, conversation_state, user_profile, message, stock_chart_output])\n",
        "\n",
        "\n",
        "\n",
        "        def fetch_stock_data(ticker):\n",
        "            if not ticker or ticker.strip() == \"\":\n",
        "                return None, \"Please enter a valid ticker symbol\"\n",
        "\n",
        "            \"\"\"Fetch real stock data using the existing get_stock_data function\"\"\"\n",
        "            try:\n",
        "                result = get_stock_data(ticker, period='3mo')\n",
        "                if isinstance(result, str):\n",
        "                    return None, result\n",
        "\n",
        "                # Extract the chart and info from the result\n",
        "                chart = result.get('chart', None)\n",
        "\n",
        "                # Create a simplified info object with the most relevant data\n",
        "                info = {\n",
        "                    \"ticker\": result['ticker'],\n",
        "                    \"current_price\": f\"${result['current_price']:.2f}\",\n",
        "                    \"weekly_change\": f\"{result['weekly_change']:.2f}%\",\n",
        "                    \"monthly_change\": f\"{result['monthly_change']:.2f}%\",\n",
        "                    \"volatility\": f\"{result['volatility']:.2f}%\",\n",
        "                    \"above_SMA20\": \"Yes\" if result['above_sma20'] else \"No\",\n",
        "                    \"above_SMA50\": \"Yes\" if result['above_sma50'] else \"No\"\n",
        "                }\n",
        "\n",
        "                return chart, info\n",
        "            except Exception as e:\n",
        "                print(f\"Error in fetch_stock_data: {str(e)}\")\n",
        "                return None, f\"Error analyzing {ticker}: {str(e)}\"\n",
        "\n",
        "        def fetch_news_sentiment(topic):\n",
        "            # Implementation to fetch and analyze news sentiment\n",
        "            # Placeholder implementation:\n",
        "            return {\n",
        "                \"topic\": topic,\n",
        "                \"sentiment\": round(np.random.normal(0, 1), 2),\n",
        "                \"articles\": [\n",
        "                    {\"title\": f\"News about {topic} 1\", \"sentiment\": \"positive\"},\n",
        "                    {\"title\": f\"News about {topic} 2\", \"sentiment\": \"neutral\"},\n",
        "                    {\"title\": f\"News about {topic} 3\", \"sentiment\": \"negative\"}\n",
        "                ],\n",
        "                \"summary\": f\"Mixed sentiment around {topic} with slight positive bias.\"\n",
        "            }\n",
        "\n",
        "        def update_market_mood():\n",
        "            # Implementation to update market mood\n",
        "            moods = [\"Bullish\", \"Bearish\", \"Neutral\", \"Fearful\", \"Greedy\"]\n",
        "            confidences = np.random.random(len(moods))\n",
        "            confidences = confidences / confidences.sum()\n",
        "            return {label: float(conf) for label, conf in zip(moods, confidences)}\n",
        "\n",
        "        def generate_report(profile):\n",
        "            # Implementation to generate financial report based on user profile\n",
        "            if not profile:\n",
        "                return \"Please provide more information about your financial situation first.\"\n",
        "\n",
        "            report = f\"# Financial Report for {profile.get('name', 'User')}\\n\\n\"\n",
        "            report += \"## Summary\\n\"\n",
        "            report += \"Based on your profile information, here's a personalized financial analysis.\\n\\n\"\n",
        "\n",
        "            # Add more sections based on available profile data\n",
        "            if 'risk_tolerance' in profile:\n",
        "                report += f\"## Risk Assessment\\n\"\n",
        "                report += f\"Your risk tolerance is {profile['risk_tolerance']}.\\n\\n\"\n",
        "\n",
        "            return report\n",
        "\n",
        "        # Update user profile based on message content\n",
        "        # This is very basic - you would want more sophisticated parsing\n",
        "        def user_input(message, chatbot, conversation_state, user_profile):\n",
        "            chatbot.append((message, None))\n",
        "\n",
        "            if \"beginner\" in message.lower():\n",
        "                user_profile[\"knowledge_level\"] = \"beginner\"\n",
        "            elif \"intermediate\" in message.lower():\n",
        "                user_profile[\"knowledge_level\"] = \"intermediate\"\n",
        "            elif \"advanced\" in message.lower():\n",
        "                user_profile[\"knowledge_level\"] = \"advanced\"\n",
        "\n",
        "            response = \"Got it! I'll tailor my answers to your knowledge level.\"\n",
        "            conversation_state.append({\"role\": \"assistant\", \"content\": response})\n",
        "            chatbot[-1] = (chatbot[-1][0], response)\n",
        "\n",
        "            return chatbot, conversation_state, user_profile, \"\", None\n",
        "\n",
        "        # Function to update the profile_info display\n",
        "        def update_profile_display(user_profile):\n",
        "            return user_profile\n",
        "\n",
        "        # Stock data tab functionality\n",
        "        stock_btn.click(fetch_stock_data, [stock_input], [stock_plot, stock_info])\n",
        "\n",
        "        # News sentiment tab functionality\n",
        "        news_btn.click(fetch_news_sentiment, [news_input], [news_output])\n",
        "\n",
        "        # Market mood tab functionality\n",
        "        update_mood_btn.click(update_market_mood, [], [market_mood])\n",
        "\n",
        "        # Report generation functionality\n",
        "        generate_report_btn.click(generate_report, [user_profile], [report_output])\n",
        "\n",
        "        # Initialize the chat on page load\n",
        "        demo.load(initialize_chat, [], [chatbot, conversation_state, user_profile])\n",
        "\n",
        "        # Add a function to update the profile info whenever user_profile changes\n",
        "        user_profile.change(update_profile_display, [user_profile], [profile_info])\n",
        "\n",
        "    return demo\n",
        "\n",
        "# Launch the app\n",
        "if __name__ == \"__main__\":\n",
        "    demo = create_interface()\n",
        "    demo.launch()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "22TGOYh99qIf"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOzaN6nnUvAxdYycWTQpT++",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}